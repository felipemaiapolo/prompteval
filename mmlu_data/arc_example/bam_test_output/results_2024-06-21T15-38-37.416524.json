{
  "results": {
    "arc.ARC_Easy_0": {
      "unitxt_accuracy,none": 0.9095117845117845,
      "unitxt_accuracy_stderr,none": "N/A",
      "alias": "arc.ARC_Easy_0"
    },
    "arc.ARC_Challenge_0": {
      "unitxt_accuracy,none": 0.7704778156996587,
      "unitxt_accuracy_stderr,none": "N/A",
      "alias": "arc.ARC_Challenge_0"
    }
  },
  "group_subtasks": {
    "arc.ARC_Challenge_0": [],
    "arc.ARC_Easy_0": []
  },
  "configs": {
    "arc.ARC_Challenge_0": {
      "task": "arc.ARC_Challenge_0",
      "group": [
        "unitxt"
      ],
      "dataset_path": "unitxt/data",
      "dataset_name": "card=cards.arc.ARC_Challenge_0,template=templates.qa.multiple_choice.with_topic.ARC_Challenge_0",
      "training_split": "train",
      "validation_split": "test",
      "doc_to_text": "{{source}}",
      "doc_to_target": "target",
      "process_results": "def process_results(doc, results):\n    metrics = doc[\"metrics\"]\n    scores = {}\n    for metric in metrics:\n        metric = metric.replace(\"metrics.\", \"unitxt_\")\n        scores[metric] = (results, doc, metric)\n\n        if metric not in METRIC_REGISTRY:\n            register_metric(\n                metric=metric,\n                higher_is_better=True,\n                output_type=\"generate_until\",\n                aggregation=\"unitxt\",\n            )(unitxt_metric)\n    return scores\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "unitxt_accuracy",
          "aggregation": "unitxt",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>"
        ]
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "verison": 1.0
      }
    },
    "arc.ARC_Easy_0": {
      "task": "arc.ARC_Easy_0",
      "group": [
        "unitxt"
      ],
      "dataset_path": "unitxt/data",
      "dataset_name": "card=cards.arc.ARC_Easy_0,template=templates.qa.multiple_choice.with_topic.ARC_Easy_0",
      "training_split": "train",
      "validation_split": "test",
      "doc_to_text": "{{source}}",
      "doc_to_target": "target",
      "process_results": "def process_results(doc, results):\n    metrics = doc[\"metrics\"]\n    scores = {}\n    for metric in metrics:\n        metric = metric.replace(\"metrics.\", \"unitxt_\")\n        scores[metric] = (results, doc, metric)\n\n        if metric not in METRIC_REGISTRY:\n            register_metric(\n                metric=metric,\n                higher_is_better=True,\n                output_type=\"generate_until\",\n                aggregation=\"unitxt\",\n            )(unitxt_metric)\n    return scores\n",
      "description": "",
      "target_delimiter": " ",
      "fewshot_delimiter": "\n\n",
      "num_fewshot": 0,
      "metric_list": [
        {
          "metric": "unitxt_accuracy",
          "aggregation": "unitxt",
          "higher_is_better": true
        }
      ],
      "output_type": "generate_until",
      "generation_kwargs": {
        "until": [
          "</s>"
        ]
      },
      "repeats": 1,
      "should_decontaminate": false,
      "metadata": {
        "verison": 1.0
      }
    }
  },
  "versions": {
    "arc.ARC_Challenge_0": "Yaml",
    "arc.ARC_Easy_0": "Yaml"
  },
  "n-shot": {
    "arc.ARC_Challenge_0": 0,
    "arc.ARC_Easy_0": 0
  },
  "higher_is_better": {
    "arc.ARC_Challenge_0": {
      "unitxt_accuracy": true
    },
    "arc.ARC_Easy_0": {
      "unitxt_accuracy": true
    }
  },
  "n-samples": {
    "arc.ARC_Easy_0": {
      "original": 2376,
      "effective": 2376
    },
    "arc.ARC_Challenge_0": {
      "original": 1172,
      "effective": 1172
    }
  },
  "config": {
    "model": "ibm_genai",
    "model_args": "model_id=meta-llama/llama-3-8b-instruct",
    "batch_size": "auto",
    "batch_sizes": [],
    "device": null,
    "use_cache": null,
    "limit": null,
    "bootstrap_iters": 100000,
    "gen_kwargs": null,
    "random_seed": 0,
    "numpy_seed": 1234,
    "torch_seed": 1234,
    "fewshot_seed": 1234
  },
  "git_hash": "8e438f9",
  "date": 1718998626.9347718,
  "pretty_env_info": "PyTorch version: 2.3.1+cu121\nIs debug build: False\nCUDA used to build PyTorch: 12.1\nROCM used to build PyTorch: N/A\n\nOS: Red Hat Enterprise Linux release 8.9 (Ootpa) (x86_64)\nGCC version: (GCC) 8.5.0 20210514 (Red Hat 8.5.0-20)\nClang version: 16.0.6 (Red Hat 16.0.6-2.module+el8.9.0+19521+190d7aba)\nCMake version: version 3.26.5\nLibc version: glibc-2.28\n\nPython version: 3.10.14 (main, May  6 2024, 19:42:50) [GCC 11.2.0] (64-bit runtime)\nPython platform: Linux-4.18.0-513.24.1.el8_9.x86_64-x86_64-with-glibc2.28\nIs CUDA available: False\nCUDA runtime version: No CUDA\nCUDA_MODULE_LOADING set to: N/A\nGPU models and configuration: No CUDA\nNvidia driver version: No CUDA\ncuDNN version: No CUDA\nHIP runtime version: N/A\nMIOpen runtime version: N/A\nIs XNNPACK available: True\n\nCPU:\nArchitecture:        x86_64\nCPU op-mode(s):      32-bit, 64-bit\nByte Order:          Little Endian\nCPU(s):              16\nOn-line CPU(s) list: 0-15\nThread(s) per core:  1\nCore(s) per socket:  8\nSocket(s):           2\nNUMA node(s):        2\nVendor ID:           GenuineIntel\nCPU family:          6\nModel:               62\nModel name:          Intel(R) Xeon(R) CPU E5-2667 v2 @ 3.30GHz\nStepping:            4\nCPU MHz:             3300.000\nCPU max MHz:         4000.0000\nCPU min MHz:         1200.0000\nBogoMIPS:            6584.62\nVirtualization:      VT-x\nL1d cache:           32K\nL1i cache:           32K\nL2 cache:            256K\nL3 cache:            25600K\nNUMA node0 CPU(s):   0-7\nNUMA node1 CPU(s):   8-15\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm cpuid_fault epb pti intel_ppin ssbd ibrs ibpb stibp tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms xsaveopt dtherm ida arat pln pts md_clear flush_l1d\n\nVersions of relevant libraries:\n[pip3] numpy==2.0.0\n[pip3] torch==2.3.1\n[pip3] triton==2.3.1\n[conda] numpy                     2.0.0                    pypi_0    pypi\n[conda] torch                     2.3.1                    pypi_0    pypi\n[conda] triton                    2.3.1                    pypi_0    pypi",
  "transformers_version": "4.41.2",
  "upper_git_hash": null,
  "task_hashes": {
    "arc.ARC_Easy_0": "816fd06d653566155d6e9c114f25a4dae4a2c843dc3de666a90b5cf0ae5494bf",
    "arc.ARC_Challenge_0": "9f4b85ad4e4358dd100fcb03c8d0a464dba0a177ac2a3a4215cba54b76e6fc4f"
  },
  "model_source": "ibm_genai",
  "model_name": "",
  "model_name_sanitized": "",
  "system_instruction": null,
  "system_instruction_sha": null,
  "chat_template": null,
  "chat_template_sha": null,
  "start_time": 5427794.539442358,
  "end_time": 5427893.72844254,
  "total_evaluation_time_seconds": "99.1890001827851"
}